<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">


	<import resource="classpath:context-datasource.xml" />
	<context:property-placeholder location="classpath:queries/queries.xml" />

	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<bean id="jobLauncher1"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!-- Tokenizer - Converts a delimited string into a Set of Fields -->
	<!-- <bean name="defaultTokenizer" -->
	<!-- class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer" 
		/> -->

	<!-- FieldSetMapper - Populates a bean's attributes with using the FieldSet -->
	<!-- <bean name="userFieldSetMapper" class="me.ahmed.batch.mapper.UserMapper" 
		/> -->

	<!-- LineMapper - Uses the tokenizer and Mapper to create instances of a 
		Bean. -->
	<!-- <bean name="userLineMapper" -->
	<!-- class="org.springframework.batch.item.file.mapping.DefaultLineMapper"> -->
	<!-- <property name="lineTokenizer" ref="defaultTokenizer" /> -->
	<!-- <property name="fieldSetMapper" ref="userFieldSetMapper" /> -->
	<!-- </bean> -->

	<!-- Reader - used by the tasklet to process one Item from the input. -->
	<bean id="userReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource" />
		<property name="sql" value="${user.select}" />
		<property name="rowMapper">
			<bean class="me.ahmed.batch.mapper.UserMapper" />
		</property>
	</bean>

	<!-- Processor -->

	<bean id="itemProcessor" class="me.ahmed.batch.processor.UserItemProcessor" />
	<!-- Writer -->
	<bean id="userWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:C:\Users\FUTUR\Desktop\files\user.txt" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names"
							value="id,username,codeBanque,email,firstname,lastname,version,statut" />

					</bean>
				</property>
<!-- 				<property name="encoding" value="ISO8859_1"></property> -->
			</bean>
		</property>
		<property name="footerCallback" ref="userHeaderFooterWriter" />
		<property name="headerCallback" ref="userHeaderFooterWriter" />
	</bean>

	<bean id="userHeaderFooterWriter" class="me.ahmed.batch.writer.UserWriter">
		<property name="delegate" ref="userWriter" />
	</bean>

	<!-- Optional JobExecutionListener to perform business logic before and 
		after the job -->
	<bean id="jobListener" class="me.ahmed.batch.listener.UserJobListener" />
	
	<bean id="logListener" class="me.ahmed.batch.listener.ItemFailureLoggerListener" />

	<!-- Step will need a transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<bean name="helloWorldTasklet" class="me.ahmed.batch.tasklet.HelloWorldTasklet"/>

	<!-- Actual Job -->
	<batch:job id="userJob1">
		<batch:step id="step1" next="step2">
	        <batch:tasklet ref="helloWorldTasklet" />
	    </batch:step>
		<batch:step id="step2">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="userReader" writer="userWriter"
					processor="itemProcessor" commit-interval="10" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
			<batch:listener ref="logListener" />
		</batch:listeners>
	</batch:job>


	<!-- To run the job from the command line type the following: mvn exec:java 
		-Dexec.mainClass=org.springframework.batch.core.launch.support.CommandLineJobRunner 
		-Dexec.args="simpleJob.xml helloWorldJob" -->
</beans>